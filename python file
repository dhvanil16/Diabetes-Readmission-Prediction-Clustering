import pandas as pd
from sklearn.preprocessing import MinMaxScaler

def preprocess_diabetic_data(csv_file_path):
    # Load the dataset into a pandas dataframe
    df = pd.read_csv(csv_file_path)

    # Drop the 'encounter_id' column
    df = df.drop('encounter_id', axis=1)

    # Replace missing values represented by '?' with NaN
    df.replace('?', pd.NA, inplace=True)

    # Display summary of missing values before replacement
    print("Summary of Missing Values Before Replacement:")
    print(df.isnull().sum())

    # Display summary of missing values after replacement
    print("\nSummary of Missing Values After Replacement:")
    print(df.isnull().sum())

    # Transform 'readmitted' column
    df['readmitted'] = df['readmitted'].replace({'<30': 1, '>30': 0, 'NO': 0})
    print("Updated 'readmitted' column:")
    print(df['readmitted'].value_counts())

    # Display data types of each column
    print("Data Types of Each Column:")
    print(df.dtypes)

    # Calculate the percentage of missing values for each column
    missing_percentage = (df.isnull().sum() / len(df)) * 100

    # Drop columns with more than 90% missing values
    columns_to_drop = missing_percentage[missing_percentage > 90].index
    df = df.drop(columns=columns_to_drop)
    print("\nDataFrame after Dropping Columns with More than 90% Missing Values:")
    print(df.head())

    # Drop near zero-variance columns
    columns_to_delete = [
        'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 'acetohexamide',
        'tolbutamide', 'acarbose', 'miglitol', 'troglitazone', 'tolazamide', 'examide',
        'citoglipton', 'glyburide-metformin', 'glipizide-metformin', 'glimepiride-pioglitazone',
        'metformin-rosiglitazone', 'metformin-pioglitazone'
    ]
    df = df.drop(columns=columns_to_delete)
    print("\nDataFrame after Dropping Near Zero-Variance Columns:")
    print(df.head())

    # Drop rows with null values
    df = df.dropna()
    print("\nDataFrame after Dropping Rows with Null Values:")
    print(df.head())

    # Identify outliers using IQR method
    Q1 = df.quantile(0.25)
    Q3 = df.quantile(0.75)
    IQR = Q3 - Q1
    outliers = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)

    # Remove outliers
    df_no_outliers = df[~outliers]
    print("\nDataFrame after Removing Outliers:")
    print(df_no_outliers.head())

    # Identify numerical columns for normalization
    numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

    # Create a MinMaxScaler
    scaler = MinMaxScaler()

    # Fit and transform numerical columns
    df[numerical_columns] = scaler.fit_transform(df[numerical_columns])
    print("\nDataFrame after Feature Normalization:")
    print(df.head())

    # Display the shape of the resulting DataFrame
    print("\nShape of DataFrame after Feature Normalization:")
    print(df.shape)

# Call the function with the CSV file path
preprocess_diabetic_data('diabetic_data.csv')
